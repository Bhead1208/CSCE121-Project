#include <iostream>    // for i/o
#include <sstream>     // for string streams
#include "Graph.h"     // next 3 are for graphics library
#include "GUI.h"
#include "Window.h"
#include "Simple_window.h"
#include "DLL.h" 
#include "hw9-pr2.h"
using namespace Graph_lib;
using namespace std;
// shapes::add
// shape:: drawlines

struct Lines_window : Graph_lib::Window {       // inherits from Window

  // constructor
  Lines_window(Point xy,             // top lefthand corner
	       int w,                // width
	       int h,                // height
	       const string& title); // label

private:
   DLL obj;
  // data members
  Open_polyline lines;               // shape to hold the lines themselves
  
  // widgets:
  Button quit_button;                // end program
  Button withdrawal_button;
  Button deposit_button;
  Button newPatron_button;
  Button getTransaction_button;
  Button displayPatron_button;
  Button totalMoney_button;
  Button addMoney_button;
  Button removeMoney_button;

  
  
  Button next_button;                // button indicating next point is ready
  In_box next_x;                     // box for entering x coord of next point
  In_box next_y;                     // box for entering y coord of next point
  In_box remove_x;					 // remove x display box 
  In_box remove_y;					 // remove x display box
  Out_box xy_out;                    // box for displaying last point entered
  Out_box removexy_out;				 // box for displaying last point entered 
  Menu color_menu;                   // menu of color choices for the lines
  Button menu_button;  // button to display the color menu
  Button erase_button; // button to erase

  
  // function members
public:

  
  void change(Color c) {             // change the color of the lines
    obj.set_color(c);
  }

  void hide_menu() {     
    // hides the color menu and shows the button to display the color menu
    color_menu.hide(); 
    menu_button.show(); 
  }

  // actions invoked by callbacks:

  void red_pressed() {
    change(Color::red);
    hide_menu();        // once a color is chosen from the menu, hide the menu
  }

  void blue_pressed() {
    change(Color::blue);
    hide_menu();
  }

  void black_pressed() {
    change(Color::black);
    hide_menu();
  }

  void menu_pressed() {
    // when menu button is pressed, hide the menu button and show the 
    // actual menu of colors
    menu_button.hide();    
    color_menu.show();
  }

  void deposit();   // defined below

  void quit();   // defined below
  
  void erase(); // defined below

  // callback functions; declared here and defined below.

  static void cb_quit(Address, Address);
  static void cb_withdrawal(Address,Address);
  static void cb_deposit(Address,Address);
  static void cb_newPatron(Address,Address);
  static void cb_getTrans(Address,Address);
  static void cb_displayPat(Address,Address);
  static void cb_totalMoney(Address,Address);
  static void cb_addMoney(Address,Address);
  static void cb_removeMoney(Address,Address);
  
  
  static void cb_red(Address, Address);
  static void cb_blue(Address, Address);
  static void cb_black(Address, Address);
  static void cb_menu(Address, Address);
  static void cb_deposit(Address, Address);
  static void cb_erase(Address,Address);
  
};

Lines_window::Lines_window(Point xy, int w, int h, const string& title) : 

  // initialization - start by calling constructor of base class 
  Window(xy,w,h,title),
/*

	static void address  made for all 
	buttons created just nedd to add cb 
	cb already made inser where ther is ****** 
	attach buttons
	
	do this for all call backs 
	
	void Lines_window::cb_quit(Address, Address pw) {
	reference_to<Lines_window>(pw).quit();   // quit is defined next
	
	.quit calls quit function similar functions must be created for every button
	so it calls the funtion  
	
	quit funtion is similar to this function
	
	void Lines_window::deposit() {
	

	redraw();  // function inherited from Window to redraw the window
    }
	
	
	
	
}

*/
    quit_button(
	      Point(x_max()-70,0),    // location of button
	      70, 20,                 // dimensions of button 
	      "Quit",                 // label of button
	      cb_quit),               // callback function for button
		  
	withdrawal_button(
		Point(x_max()-100,0),
		70,20,
		"Withdraw",
		cb_withdrawal),
		
	deposit_button(
		Point(x_max()-130,0),
		70,20,
		"Deposit",
		******),
		
	newPatron_button(
		Point(x_max()-150,0),
		70,20,
		"New Patron",
		******),
	
	getTransaction_button(
		Point(x_max()-180,0),
		70,20,
		"Show Transactions",
		******),
		
	displayPatron_button(
		Point(x_max()-200,0),
		70,20,
		"Show Patron",
		******),
		
	totalMoney_button(
		Point(x_max()-220,0),
		70,20,
		"Display Money",
		******),
		
	addMoney_button(
		Point(x_max-240,0),
		70,20,
		"Add Money",
		******),
	removeMoney_button(
		Point(x_max-260,0)),
		70,20,
		"Remove Money",
		******),
		  
	
  // initialize "Next point" button
  next_button(
	      Point(x_max()-150,0),   // location of button
	      70, 20,                 // dimensions of button
	      "",           // label of button
	      cb_deposit),               // callback function for button
  // initialize erase button
   erase_button(
	      Point(x_max()-150,30),   // location of button
	      70, 20,                 // dimensions of button
	      "Delete Point",           // label of button
	      cb_erase),               // callback function for button
  // initialize quit button

  // initialize the next_x inbox
  next_x(
	 Point(x_max()-310,0),       // location of box
	 50, 20,                     // dimensions of box
	 "next x:"),// label of box 
	 
	  remove_x(
	 Point(x_max()-310,30),       // location of box
	 50, 20,                     // dimensions of box
	 "remove x:"),// label of box 
	 
	 
  // initialize the next_y inbox
  next_y(
	 Point(x_max()-210,0),       // location of box
	 50, 20, 
	// dimensions of box
	 "next y:"),  	 // label of box
	
	remove_y(
	 Point(x_max()-210,30),       // location of box
	 50, 20,                     // dimensions of box
	 "remove y:"),
  // initialize the outbox
  xy_out(
	 Point(100,0),               // location of box
	 100, 20,                    // dimensions of box
	 "current (x,y):"),          // label of box
	 
	 removexy_out(
	 Point(100,30),               // location of box
	 100, 20,                    // dimensions of box
	 "removed (x,y):"),
  // initialize the color menu
  color_menu(                        
	     Point(x_max()-70,30),   // location of menu
	     70, 20,                 // dimensions of menu
	     Menu::vertical,         // list menu items vertically
	     "color"),               // label of menu 
  // initialize the menu button
  menu_button(
	      Point(x_max()-80,30),  // location of menu button
	      80, 20,                // dimensions of button 
	      "color menu",          // label of button
	      cb_menu)               // callback for button

  // body of constructor follows
{
  // attach buttons and boxes to window
  attach(next_button);
  attach(quit_button);
  attach(next_x);
  attach(next_y);
  attach(remove_y);
  attach(remove_x);
  attach(xy_out);
  attach(removexy_out);
  attach(obj);
  attach(erase_button);
  xy_out.put("no point");        // output to out box
  removexy_out.put("no point");       // output to out box
  // First make 3 buttons for color menu, one for each color, and 
  // attach them to the menu: the attach function of the Menu struct
  // adjusts the size and location of the buttons; note callback functions).
  // Then attach menu to window but hide it (initially, the menu button
  // is displayed, not the actual menu of color choices).

  color_menu.attach(new Button(Point(0,0),0,0,"red",cb_red)); 
  color_menu.attach(new Button(Point(0,0),0,0,"blue",cb_blue));
  color_menu.attach(new Button(Point(0,0),0,0,"black",cb_black));
  attach(color_menu);
  color_menu.hide(); 

  // attach menu button
  attach(menu_button);

  // attach shape that holds the lines to be displayed
  attach(lines);
}

// ---------------------------- 
// callback function for quit button - boilerplate: 
// When the button is pressed, the system invokes the
// specified callback function.  First argument is address of the
// button (which we won't use, so we don't bother to name it).  Second
// argument, named pw, is address of the window containing the pressed
// button, i.e., address of our Lines_window object.  reference_to
// converts the address pw into a reference to a Lines_window object,
// so we can call the quit() function.  Objective is to call function
// quit() which does the real work specific to this button.

void Lines_window::cb_quit(Address, Address pw) {
  reference_to<Lines_window>(pw).quit();   // quit is defined next
}

//------------------------------------
// what to do when quit button is pressed

void Lines_window::quit() {
  hide();                   // FLTK idiom for delete window
}

// ----------------------------
// callback function for next button - boilerplate:

void Lines_window::cb_deposit(Address, Address pw) {
  reference_to<Lines_window>(pw).deposit();  // next is defined next
}

void Lines_window::cb_erase(Address, Address pw) {
  reference_to<Lines_window>(pw).erase();  // next is defined next
}

// -------------------------------
// what to do when "next point" button is pressed


//***********************************************************
//***********************************************************
//***********************************************************

/*

next

case 1: withdrawal(); break;
			case 2: deposit(); break;
			case 3: newPatron(); break;
			case 4: get_Transactions(); break;
			case 5: get_Patrons(); break;
			case 6: getTotalMoney(); break;
			case 7: add(); break;
			case 8: remove(); break;
			case 9: stop = true; break;
			
*/

void Lines_window::deposit() {
	

	redraw();  // function inherited from Window to redraw the window
    }
void Lines_window::erase() {
	

    redraw();  // function inherited from Window to redraw the window
    }
	
// -------------------------------
// callback for when red button (part of color menu) is pressed - boilerplate

void Lines_window::cb_red(Address, Address pw) {
  reference_to<Lines_window>(pw).red_pressed();  
  // red_pressed defined in Lines_window class as part of declaration
}

// -------------------------------
// callback for when blue button (part of color menu) is pressed - boilerplate

void Lines_window::cb_blue(Address, Address pw) {
  reference_to<Lines_window>(pw).blue_pressed();  
  // blue_pressed defined in Lines_window class as part of declaration
}

// -------------------------------
// callback for when black button (part of color menu) is pressed - boilerplate

void Lines_window::cb_black(Address, Address pw) {
  reference_to<Lines_window>(pw).black_pressed();  
  // black_pressed defined in Lines_window class as part of declaration
}

// -------------------------------
// callback for when menu button is pressed - boilerplate

void Lines_window::cb_menu(Address, Address pw)
{  
    reference_to<Lines_window>(pw).menu_pressed();
    // menu_pressed defined in Lines_window class as part of declaration
} 

// ---------------------------------------------------
// main - just creates window and invokes gui_main


int main() 
  try {
    // construct the GUI window
  Lines_window win(Point(100,100),600,400,"lines");

	//win.attach(win.get_DLL());
    return gui_main();  // inherited from Window; calls FLTK's run
  }
  catch(exception& e) {
    cerr << "exception: " << e.what() << '\n';
    return 1;
  }
  catch(...) {
    cerr << "some exception\n";
    return 2;
  }
